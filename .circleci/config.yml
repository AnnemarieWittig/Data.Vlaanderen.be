version: 2
jobs:
  extract-vocabularia:
    docker:
      - image: informatievlaanderen/oslo-ea-to-rdf:circleci
    steps:
      - checkout
      # - run :
      #   name: Create a list of all diagrams for each EAP file
      #   command: |
      #   rm /tmp/diagrams.list
      #   for model in $(ls src/ | grep .EAP); do
      #     java -jar ea-2-rdf.jar list -i src/${model} | awk -v model="${model}" '/Diagram/ && /OSLO/ {print model " " $2}' >> /tmp/diagrams.list
      #   done
      - run:
          name: Extract ttl data for each diagram
          command: |
            awk '{print "java -jar /app/ea-2-rdf.jar convert -i src/OSLOÂ²_vocabularium.EAP -c src/config-voc.json -d OSLO-" $1 " -o /tmp/workspace/ttl/" tolower($1) ".ttl"}' < src/eap-mapping.list | sh
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - ttl/
  extract-application-profiles:
    docker:
      - image: informatievlaanderen/oslo-ea-to-rdf:circleci
    steps:
      - checkout
      # - run:
      #   name: Create a list of all diagrams for each EAP file
      #   command: |
      #   rm /tmp/diagrams.list
      #   for model in $(ls src/ | grep .EAP); do
      #     java -jar ea-2-rdf.jar list -i src/${model} | awk -v model="${model}" '/Diagram/ && /OSLO/ {print model " " $2}' >> /tmp/diagrams.list
      #   done
      - run:
          name: Extract tsv data for each diagram
          command: |
            grep -v nil src/eap-mapping.list | awk '{print "java -jar /app/ea-2-rdf.jar tsv -i src/" $2 " -c src/config-ap.json -d " $3 " -o /tmp/workspace/tsv/" tolower($1) ".tsv"}' | sh
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - tsv/
  render-voc-html:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:circleci
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Extract contributors for every vocabulary
          command: |
            for model in $(ls /tmp/workspace/ttl | sed 's/.ttl//'); do
              python /app/specgen/generate_vocabulary.py --contributors --csv src/stakeholders_latest.csv --csv_contributor_role_column ${model^} --output /tmp/workspace/contrib/${model}.xml
            done
      - run:
          name: Merge contributors xml with vocabulary ttl
          command: |
            for model in $(ls /tmp/workspace/ttl | sed 's/.ttl//'); do
              python /app/specgen/generate_vocabulary.py --merge --rdf /tmp/workspace/ttl/${model}.ttl --rdf_contributor /tmp/workspace/contrib/${model}.xml --output /tmp/workspace/ttl/${model}.ttl
            done
      - run:
          name: Render HTML version of merged ttl file
          command: |
            for model in $(ls /tmp/workspace/ttl | sed 's/.ttl//'); do
              python /app/specgen/generate_vocabulary.py --rdf /tmp/workspace/ttl/${model}.ttl --output /tmp/workspace/voc/${model}/index.html
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - voc/
  render-voc-rdf:
    docker:
      - image: circleci/ruby
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            gem install linkeddata && mkdir -p /tmp/workspace/voc 
            sed -i '/TBD/d' /tmp/workspace/ttl/gebouw.ttl
      - run:
          name: Turn TODO into proper URIs
          command: find /tmp/workspace/ttl -type f | xargs sed -i 's/TODO/http:\/\/example.com\/TODO/g'
      - run:
          name: Generate ntriples
          command: |
            for model in $(ls /tmp/workspace/ttl | sed 's/.ttl//'); do
              rdf serialize --input-format turtle --output-format ntriples /tmp/workspace/ttl/${model}.ttl -o /tmp/workspace/voc/${model}.nt
            done
      - run:
          name: Generate rdfxml
          command: |
            for model in $(ls /tmp/workspace/ttl | sed 's/.ttl//'); do
              rdf serialize --input-format turtle --output-format rdfxml /tmp/workspace/ttl/${model}.ttl -o /tmp/workspace/voc/${model}.rdf
            done
      - run:
          name: Generate jsonld
          command: |
            for model in $(ls /tmp/workspace/ttl | sed 's/.ttl//'); do
              rdf serialize --input-format turtle --output-format jsonld /tmp/workspace/ttl/${model}.ttl -o /tmp/workspace/voc/${model}.jsonld
              cp /tmp/workspace/voc/${model}.jsonld /tmp/workspace/voc/${model}.json
            done
      - run:
          name: Generate turtle
          command: |
            for model in $(ls /tmp/workspace/ttl | sed 's/.ttl//'); do
              cp /tmp/workspace/ttl/${model}.ttl /tmp/workspace/voc/${model}.ttl
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - voc/
  render-ap-html:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:circleci
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render HTML of AP tsv file
          command: |
            for model in $(ls /tmp/workspace/tsv | sed 's/.tsv//'); do
              python /app/specgen/generate_vocabulary.py --ap --csv /tmp/workspace/tsv/${model}.tsv --csv_contributor src/stakeholders_latest.csv --title ${model^} --output /tmp/workspace/ap/${model}/index.html
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - ap/
  render-ap-jsonld:
    docker:
      - image: informatievlaanderen/oslo-specification-generator:circleci
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Render jsonld version of AP tsv file
          command: |
            for model in $(ls /tmp/workspace/tsv | sed 's/.tsv//'); do
              python /app/specgen/generate_jsonld.py --input /tmp/workspace/tsv/${model}.tsv --output /tmp/workspace/ap/${model}.jsonld
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - ap/
  create-artifact:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "84:ef:18:e6:4c:b3:fa:38:4e:d2:47:09:e9:be:0f:e6"
      - run:
          name: Checkout target repo
          workdir: /tmp
          command: |
            git clone git@github.com:Informatievlaanderen/OSLO-Generated.git
            cd OSLO-Generated && git checkout -b "${CIRCLE_BRANCH}"
            mkdir -p ns doc/applicatieprofiel context
      - run:
          name: Copy static assets
          command: |
            cp index.html /tmp/OSLO-Generated/index.html
            cp -R cms/ /tmp/OSLO-Generated/cms
            cp -R shacl/ /tmp/OSLO-Generated/shacl
            cp ns/index.html /tmp/OSLO-Generated/ns/index.html
            cp -R doc/conceptscheme/ /tmp/OSLO-Generated/doc/conceptscheme
      - run:
          name: Copy generated assets
          workdir: /tmp/workspace
          command: |
            cp -R voc/* /tmp/OSLO-Generated/ns/
            cp ap/*.jsonld /tmp/OSLO-Generated/context/
            cp -R ap/* /tmp/OSLO-Generated/doc/applicatieprofiel/
      - run:
          name: Push results to github
          workdir: /tmp/OSLO-Generated
          command: |
            git config user.email "dummy@kb.vlaanderen.be"
            git config user.name "Circle CI Builder"
            git add .
            git commit -m "Applying changes from commit ${CIRCLE_SHA1}"
            git push origin "${CIRCLE_BRANCH}"
workflows:
  version: 2
  generate_documentation:
    jobs:
      - extract-vocabularia
      - extract-application-profiles
      - render-voc-html:
          requires:
            - extract-vocabularia
      - render-voc-rdf:
          requires:
            - extract-vocabularia
      - render-ap-html:
          requires:
            - extract-application-profiles
      - render-ap-jsonld:
          requires:
            - extract-application-profiles
      - create-artifact:
          requires:
            - render-voc-html
            - render-voc-rdf
            - render-ap-html
            - render-ap-jsonld
